[WBI_YARP_BODY_PARTS]
#using the same structure used in skinDynLib common.h
#unfortunatly this involves defining fake parts
#structure copied from iKinChain loading, redudant but more robus
numBodyParts = 11
bodyPart0 = unknown_body_part 
bodyPart1 = torso
bodyPart2 = head
bodyPart3 = left_arm
bodyPart4 = right_arm
bodyPart5 = left_leg
bodyPart6 = right_leg 
bodyPart7 = all_body_parts
bodyPart8 = lower_body_parts
bodyPart9 = upper_body_parts
bodyPart10 = body_part_size

[WBI_YARP_BODY_PARTS_REMAPPING]
#use this option if you want to map the joint of a part in the wbi
#to different joints of the relative yarp devices
#example: head (0 1) (1 2) (2 0) maps wbi 0 joint to yarp device 1, wbi 1 to yarp 2, etc etc
#torso = (0 2) (1 1) (2 0)
#(not implemented for now, we just have a "invert_torso_joints" switch:
reverse_torso_joints

[WBI_YARP_LOCAL_ID_LISTS]
#joints
ICUB_TORSO_JOINTS = (torso,0,1,2)
ICUB_LEFT_ARM_JOINTS = (left_arm,0,1,2,3,4)
ICUB_RIGHT_ARM_JOINTS = (right_arm,0,1,2,3,4)
ICUB_LEFT_LEG_JOINTS = (left_leg,0,1,2,3,4,5)
ICUB_RIGHT_LEG_JOINTS = (right_leg,0,1,2,3,5)
ICUB_MAIN_JOINTS = (ICUB_TORSO_JOINTS,ICUB_LEFT_ARM_JOINTS,ICUB_RIGHT_ARM_JOINTS,ICUB_LEFT_LEG_JOINTS,ICUB_RIGHT_LEG_JOINTS)
ICUB_HEAD_JOINTS = (head,0,1,2)
ICUB_LEFT_ARM_DYNAMIC_MODEL_JOINTS = (left_arm,0,1,2,3,4,5,6)
ICUB_RIGHT_ARM_DYNAMICAL_MODEL_JOINTS = (right_arm,0,1,2,3,4,5,6)
ICUB_DYNAMIC_MODEL_JOINTS = (ICUB_TORSO_JOINTS,ICUB_HEAD_JOINTS,ICUB_LEFT_ARM_DYNAMIC_MODEL_JOINTS,ICUB_RIGHT_ARM_DYNAMICAL_MODEL_JOINTS,ICUB_LEFT_LEG_JOINTS,ICUB_RIGHT_LEG_JOINTS)

#IMU
ICUB_HEAD_IMUS = (head,0)
ICUB_MAIN_IMUS = (ICUB_HEAD_IMUS)

#FTS 
ICUB_LEFT_ARM_FTS = (left_arm,0)
ICUB_RIGHT_LEG_FTS = (right_arm,0)
ICUB_LEFT_LEG_FTS = (left_leg,0,1)
ICUB_RIGHT_LEG_FTS = (right_leg,0,1)

ICUB_MAIN_FTS = (ICUB_LEFT_ARM_FTS,ICUB_RIGHT_LEG_FTS,ICUB_LEFT_LEG_FTS,ICUB_RIGHT_LEG_FTS)

[WBI_YARP_IMU_PORTS]
(head,0,/inertial)

[WBI_YARP_FT_PORTS]
(left_arm,0,/left_arm/analog:o)
(right_arm,0,/right_arm/analog:o)
(left_leg,0,/left_leg/analog:o)
(left_leg,1,/left_foot/analog:o)
(right_leg,0,/right_leg/analog:o)
(right_leg,1,/right_foot/analog:o)

[WBI_IDYNTREE_MODEL]
#use_idyn_icub_model head_version legs_version feet_version
use_idyn_icub_model 2 2 2
#alternative: use_urdf_model 
#if you use_urdf_model, you should also define a proper idyntree_serialization with a list of dofs in your desired order,
#for example:
#idyntree_serialization dof0 dof1 dof2 dof3
#and a proper partition:

#idyntree_parts torso head 
#idyntree_torso_dofs dof0 dof1
#idyntree_torso_links link0 link1 
#idyntree_head_dofs dof2 dof3
#idyntree_head_links link2 link3 link4
#if you don't define parts and serialization, it is not a big issue, the default one will work

