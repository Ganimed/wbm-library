function [f_c, tau_gen] = contactForcesCLPCEF(obj, clnk_conf, tau, fe_c, ac, Jc, djcdq, M, c_qv, varargin)
    switch nargin
        % fe_c ... external forces affecting on the contact links
        % ac   ... mixed generalized contact accelerations
        case 14 % normal modes:
            % generalized forces with friction:
            % wf_R_b_arr = varargin{1}
            % wf_p_b     = varargin{2}
            % q_j        = varargin{3}
            dq_j = varargin{1,4};
            nu   = varargin{1,5}; % mixed generalized velocity

            tau_fr  = frictionForces(obj, dq_j);         % friction torques (negated torque values)
            tau_gen = vertcat(zeros(6,1), tau + tau_fr); % generalized forces tau_gen = S_j*(tau + (-tau_fr)),
                                                         % S_j = [0_(6xn); I_(nxn)] ... joint selection matrix
            perror_cl = poseErrorCL(obj, clnk_conf, varargin{1:3});
        case 13
            % without friction:
            % wf_R_b_arr = varargin{1}
            % wf_p_b     = varargin{2}
            % q_j        = varargin{3}
            nu = varargin{1,4};

            tau_gen   = vertcat(zeros(6,1), tau);
            perror_cl = poseErrorCL(obj, clnk_conf, varargin{1:3});
        case 11 % optimized modes:
            % with friction:
            dq_j = varargin{1,1};
            nu   = varargin{1,2};

            tau_fr    = frictionForces(obj, dq_j);
            tau_gen   = vertcat(zeros(6,1), tau + tau_fr);
            perror_cl = poseErrorCL(obj, clnk_conf);
        case 10
            % without friction:
            nu = varargin{1,1};

            tau_gen   = vertcat(zeros(6,1), tau);
            perror_cl = poseErrorCL(obj, clnk_conf);
        otherwise
            error('WBM::contactForcesCLPCEF: %s', WBM.wbmErrorMsg.WRONG_NARGIN);
    end
    if ( isscalar(perror_cl) && ~perror_cl )
        % both contact links have no contact to the ground/object ...
        f_c = obj.ZERO_CVEC_12;
        return
    end
    k_p = clnk_conf.ctrl_gains.k_p; % control gain for correcting the link positions (position feedback).
    k_v = clnk_conf.ctrl_gains.k_v; % control gain for correcting the velocities (rate feedback).

    % Calculation of the contact force vector for a closed-loop control system with additional
    % velocity and position correction for the contact links (position-regulation system):
    % For further details about the basic formula see,
    %   [1] Control Strategies for Robots in Contact, J. Park, PhD-Thesis, Artificial Intelligence Laboratory, Stanford University, 2006,
    %       <http://cs.stanford.edu/group/manips/publications/pdfs/Park_2006_thesis.pdf>, Chapter 5, pp. 106-110, eq. (5.5)-(5.14).
    %   [2] A Mathematical Introduction to Robotic Manipulation, Murray & Li & Sastry, CRC Press, 1994, pp. 269-270, eq. (6.5) & (6.6).
    Jc_t      = Jc.';
    JcMinv    = Jc / M; % = Jc * M^(-1)
    Upsilon_c = JcMinv * Jc_t; % inverse mass matrix Upsilon_c = Lambda^(-1) = Jc * M^(-1) * Jc^T in contact space {c},
                               % Lambda^(-1) ... inverse pseudo-kinetic energy matrix.
    % contact constraint forces (generated by the environment) ...
    f_c = (Upsilon_c \ (ac + JcMinv*(c_qv - tau_gen) - djcdq - k_v.*(Jc*nu) - k_p.*perror_cl)) - fe_c;
    % (this calculation method is numerically more accurate and robust than the calculation variant with the cartmass-function.)
end
%% END of contactForcesCLPCEF.


%% POSE TRANSFORMATIONS & POSE ERROR FUNCTIONS:

function perror_cl = poseErrorCL(obj, clnk_conf, varargin)
    switch clnk_conf.rtype
        case 'e'
            % use Euler-angles:
            perror_cl = poseErrorCLE(obj, clnk_conf, varargin{:});
        case 'q'
            % use quaternions:
            perror_cl = poseErrorCLQ(obj, clnk_conf, varargin{:});
        otherwise
            error('poseErrorCL: %s', WBM.wbmErrorMsg.STRING_MISMATCH);
    end
end

function perror_cl = poseErrorCLE(obj, clnk_conf, varargin) % via Euler-angles
    ctc_l = clnk_conf.contact.left;
    ctc_r = clnk_conf.contact.right;

    % check which link is in contact with the ground or object and calculate the corresponding
    % error between the reference (desired) and the new link transformations:
    if (ctc_l && ctc_r)
        % both links are in contact with the ground/object:
        clink_l = obj.mwbm_config.ccstr_link_names{1,clnk_conf.lnk_idx_l};
        clink_r = obj.mwbm_config.ccstr_link_names{1,clnk_conf.lnk_idx_r};

        % set the desired poses (VE-Transformations (i)) of the contact links as reference ...
        fk_ref_pose.veT_llnk = clnk_conf.des_pose.veT_llnk;
        fk_ref_pose.veT_rlnk = clnk_conf.des_pose.veT_rlnk;

        % get the new VQ-transformations (link frames) of the contact links ...
        fk_new_pose = poseTransformationsCL(clink_l, clink_r, varargin{:});
        % convert the link frames in VE-Transformations (veT) ...
        [p_ll, eul_ll] = WBM.utilities.tfms.frame2posEul(fk_new_pose.vqT_llnk);
        [p_rl, eul_rl] = WBM.utilities.tfms.frame2posEul(fk_new_pose.vqT_rlnk);
        fk_new_pose.veT_llnk = vertcat(p_ll, eul_ll); % current motions
        fk_new_pose.veT_rlnk = vertcat(p_rl, eul_rl);

        % compute the Euler angle velocity transformations ...
        Er_ll = WBM.utilities.tfms.eul2angVelTF(eul_ll);
        Er_rl = WBM.utilities.tfms.eul2angVelTF(eul_rl);
        % create for each link the mixed velocity transformation matrix ...
        vX_ll = WBM.utilities.tfms.mixveltfm(Er_ll);
        vX_rl = WBM.utilities.tfms.mixveltfm(Er_rl);

        % get the pose error (distances) between the contact link poses (CLP):
        % delta  =   vX * (current transf. T   -   desired transf. T*)
        %                   (curr. motion)           (ref. motion)
        delta_ll = vX_ll*(fk_new_pose.veT_llnk - fk_ref_pose.veT_llnk);
        delta_rl = vX_rl*(fk_new_pose.veT_rlnk - fk_ref_pose.veT_rlnk);

        perror_cl = vertcat(delta_ll, delta_rl);
    elseif ctc_l
        % only the left link is in contact with the ground/object:
        clink_l = obj.mwbm_config.ccstr_link_names{1,clnk_conf.lnk_idx_l};

        % set the desired pose transformation as reference and
        % compute the new pose transformation:
        fk_ref_pose.veT_llnk = clnk_conf.des_pose.veT_llnk;
        fk_new_pose = poseTransformationLeftCL(clink_l, varargin{:});
        % convert to VE-transformation ...
        [p_ll, eul_ll] = WBM.utilities.tfms.frame2posEul(fk_new_pose.vqT_llnk);
        fk_new_pose.veT_llnk = vertcat(p_ll, eul_ll); % current motion

        % create the mixed velocity transformation ...
        Er_ll = WBM.utilities.tfms.eul2angVelTF(eul_ll);
        vX_ll = WBM.utilities.tfms.mixveltfm(Er_ll);
        % compute the pose error (distance) ...
        perror_cl = vX_ll*(fk_new_pose.veT_llnk - fk_ref_pose.veT_llnk);
    elseif ctc_r
        % only the right link is in contact with the ground/object:
        clink_r = obj.mwbm_config.ccstr_link_names{1,clnk_conf.lnk_idx_r};

        % set the desired pose transformation as reference and
        % compute the new pose transformation:
        fk_ref_pose.veT_rlnk = clnk_conf.des_pose.veT_rlnk;
        fk_new_pose = poseTransformationRightCL(clink_r, varargin{:});

        [p_rl, eul_rl] = WBM.utilities.tfms.frame2posEul(fk_new_pose.vqT_rlnk);
        fk_new_pose.veT_rlnk = vertcat(p_rl, eul_rl);

        % create the mixed velocity transformation ...
        Er_rl = WBM.utilities.tfms.eul2angVelTF(eul_rl);
        vX_rl = WBM.utilities.tfms.mixveltfm(Er_rl);
        % compute the pose error (distance) ...
        perror_cl = vX_rl*(fk_new_pose.veT_rlnk - fk_ref_pose.veT_rlnk);
    else
        % both links have no contact to the ground/object ...
        perror_cl = 0;
    end
end

% (i) veT: Position vector with Euler angles (in this case it represents a
%     joint motion m(t) = (p(t), e(t))^T, where p(t) in R^3 and e(t) in S^3).

function perror_cl = poseErrorCLQ(obj, clnk_conf, varargin) % via quaternions
    ctc_l = clnk_conf.contact.left;
    ctc_r = clnk_conf.contact.right;

    % check which link is in contact with the ground or object and calculate the corresponding
    % error between the reference (desired) and the new link transformations:
    if (ctc_l && ctc_r)
        % both links are in contact with the ground/object:
        clink_l = obj.mwbm_config.ccstr_link_names{1,clnk_conf.lnk_idx_l};
        clink_r = obj.mwbm_config.ccstr_link_names{1,clnk_conf.lnk_idx_r};

        % set the desired poses (VQ-Transformations (ii)) of the contact links as reference ...
        fk_ref_pose.vqT_llnk = clnk_conf.des_pose.vqT_llnk;
        fk_ref_pose.vqT_rlnk = clnk_conf.des_pose.vqT_rlnk;

        % get the new VQ-transformations (link frames) and the corresponding
        % orientations of the contact links ...
        fk_new_pose = poseTransformationsCL(clink_l, clink_r, varargin{:});
        quat_ll = fk_new_pose.vqT_llnk(4:7,1);
        quat_rl = fk_new_pose.vqT_rlnk(4:7,1);

        % compute the quaternion velocity transformations ...
        Er_ll = WBM.utilities.tfms.quat2angVelTF(quat_ll);
        Er_rl = WBM.utilities.tfms.quat2angVelTF(quat_rl);
        % create for each link the mixed velocity transformation matrix ...
        vX_ll = WBM.utilities.tfms.mixveltfm(Er_ll);
        vX_rl = WBM.utilities.tfms.mixveltfm(Er_rl);

        % get the pose error (distances) between the contact link poses (CLP):
        % delta  =   vX * (current transf. T   -   desired transf. T*)
        %                   (curr. motion)           (ref. motion)
        delta_ll = vX_ll*(fk_new_pose.vqT_llnk - fk_ref_pose.vqT_llnk);
        delta_rl = vX_rl*(fk_new_pose.vqT_rlnk - fk_ref_pose.vqT_rlnk);

        perror_cl = vertcat(delta_ll, delta_rl);
    elseif ctc_l
        % only the left link is in contact with the ground/object:
        clink_l = obj.mwbm_config.ccstr_link_names{1,clnk_conf.lnk_idx_l};

        % set the desired pose transformation as reference and compute
        % the new pose transformation with the corresponding orientation:
        fk_ref_pose.vqT_llnk = clnk_conf.des_pose.vqT_llnk;
        fk_new_pose = poseTransformationLeftCL(clink_l, varargin{:});
        quat_ll = fk_new_pose.vqT_llnk(4:7,1);

        % create the mixed velocity transformation ...
        Er_ll = WBM.utilities.tfms.quat2angVelTF(quat_ll);
        vX_ll = WBM.utilities.tfms.mixveltfm(Er_ll);
        % compute the pose error (distance) ...
        perror_cl = vX_ll*(fk_new_pose.vqT_llnk - fk_ref_pose.vqT_llnk);
    elseif ctc_r
        % only the right link is in contact with the ground/object:
        clink_r = obj.mwbm_config.ccstr_link_names{1,clnk_conf.lnk_idx_r};

        % set the desired pose transformation as reference and compute
        % the new pose transformation with the corresponding orientation:
        fk_ref_pose.vqT_rlnk = clnk_conf.des_pose.vqT_rlnk;
        fk_new_pose = poseTransformationRightCL(clink_r, varargin{:});
        quat_rl = fk_new_pose.vqT_rlnk(4:7,1);

        % create the mixed velocity transformation ...
        Er_rl = WBM.utilities.tfms.quat2angVelTF(quat_rl);
        vX_rl = WBM.utilities.tfms.mixveltfm(Er_rl);
        % compute the pose error (distance) ...
        perror_cl = vX_rl*(fk_new_pose.vqT_rlnk - fk_ref_pose.vqT_rlnk);
    else
        % both links have no contact to the ground/object ...
        perror_cl = 0;
    end
end

% (ii) vqT: Vector quaternion transformation (VQT). Position vector with a quaternion
%      as orientation (in this case it represents a joint motion m(t) = (p(t), q(t))^T,
%      where p(t) in R^3 and q(t) in R^4).

function fk_new_pose = poseTransformationsCL(clink_l, clink_r, varargin)
    % get the new positions and orientations (VQ-transformations) for both contact links:
    switch nargin
        case 5 % normal mode:
            % wf_R_b_arr = varargin{1}
            % wf_p_b     = varargin{2}
            % q_j        = varargin{3}
            fk_new_pose.vqT_llnk = mexWholeBodyModel('forward-kinematics', varargin{1,1}, varargin{1,2}, varargin{1,3}, clink_l);
            fk_new_pose.vqT_rlnk = mexWholeBodyModel('forward-kinematics', varargin{1,1}, varargin{1,2}, varargin{1,3}, clink_r);
        case 2 % optimized mode:
            fk_new_pose.vqT_llnk = mexWholeBodyModel('forward-kinematics', clink_l);
            fk_new_pose.vqT_rlnk = mexWholeBodyModel('forward-kinematics', clink_r);
        otherwise
            error('poseTransformationsCL: %s', WBM.wbmErrorMsg.WRONG_NARGIN);
    end
end

function fk_new_pose = poseTransformationLeftCL(clink_l, varargin)
    % get the new VQ-transformation for the left contact link:
    switch nargin
        case 4 % normal mode:
            % wf_R_b_arr = varargin{1}
            % wf_p_b     = varargin{2}
            % q_j        = varargin{3}
            fk_new_pose.vqT_llnk = mexWholeBodyModel('forward-kinematics', varargin{1,1}, varargin{1,2}, varargin{1,3}, clink_l);
        case 1 % optimized mode:
            fk_new_pose.vqT_llnk = mexWholeBodyModel('forward-kinematics', clink_l);
        otherwise
            error('poseTransformationLeftCL: %s', WBM.wbmErrorMsg.WRONG_NARGIN);
    end
end

function fk_new_pose = poseTransformationRightCL(clink_r, varargin)
    % get the new VQ-transformation for the right contact link:
    switch nargin
        case 4 % normal mode:
            % wf_R_b_arr = varargin{1}
            % wf_p_b     = varargin{2}
            % q_j        = varargin{3}
            fk_new_pose.vqT_rlnk = mexWholeBodyModel('forward-kinematics', varargin{1,1}, varargin{1,2}, varargin{1,3}, clink_r);
        case 1 % optimized mode:
            fk_new_pose.vqT_rlnk = mexWholeBodyModel('forward-kinematics', clink_r);
        otherwise
            error('poseTransformationRightCL: %s', WBM.wbmErrorMsg.WRONG_NARGIN);
    end
end
